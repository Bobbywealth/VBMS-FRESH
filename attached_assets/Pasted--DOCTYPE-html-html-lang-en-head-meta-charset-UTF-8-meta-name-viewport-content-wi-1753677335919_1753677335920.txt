<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Tasks - VBMS</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <style>
    :root {
      --accent: #f0b90b;
      --accent-light: #ffd700;
      --accent-glow: rgba(240, 185, 11, 0.4);
      --primary-dark: #d4a109;
      --secondary: #2c3e50;
      --success: #22c55e;
      --danger: #ef4444;
      --warning: #f59e0b;
      --info: #3b82f6;
      --purple: #a855f7;
      --cyan: #06b6d4;
      --light: #f8f9fa;
      --dark: #212529;
      --glass: rgba(255,255,255,0.95);
      --glass-glow: rgba(240, 185, 11, 0.15);
      --border: #e9ecef;
      --text: #212529;
      --text-muted: #6c757d;
      --card-bg: #ffffff;
      --card-shadow: 0 8px 32px rgba(240, 185, 11, 0.1);
      --bg: linear-gradient(135deg, #f8f9fa 0%, #f0f8ff 50%, #f8f4ff 100%);
      --sidebar-bg: rgba(255,255,255,0.98);
      --sidebar-link: #333;
      --sidebar-link-active: #000;
      --sidebar-heading: #6c757d;
      --input-bg: #ffffff;
      --input-border: var(--accent);
      --badge-due: #f59e0b;
      --badge-new: #3b82f6;
      --task-done: #10b981;
      --card-shadow-heavy: 0 8px 32px rgba(240, 185, 11, 0.15);
      --text-main: #212529;
      --rail: #e9ecef;
      --thumb: #ced4da;
      --table-header: #f8f9fa;
      --scrollbar-thumb: var(--accent);
      --scrollbar-thumb-hover: #d4a109;
      --main-bg: var(--bg);
    }

    /* Light theme - Enhanced */
    [data-theme="light"] {
      --bg: linear-gradient(135deg, #ffffff 0%, #f8fafc 30%, #e2e8f0 100%);
      --light: #1a202c;
      --dark: #ffffff;
      --text: #2d3748;
      --text-muted: #718096;
      --card-bg: rgba(255, 255, 255, 0.95);
      --card-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
      --border: #e2e8f0;
      --glass: rgba(255, 255, 255, 0.95);
      --glass-glow: rgba(240, 185, 11, 0.12);
      --sidebar-bg: rgba(255, 255, 255, 0.98);
      --sidebar-link: #4a5568;
      --sidebar-link-active: #1a202c;
      --accent: #f59e0b;
      --accent-light: #fbbf24;
      --success: #10b981;
      --danger: #ef4444;
      --warning: #f59e0b;
      --info: #3b82f6;
      --purple: #8b5cf6;
      --cyan: #06b6d4;
      --sidebar-heading: #718096;
      --input-bg: #ffffff;
      --input-border: #e2e8f0;
      --badge-due: #f59e0b;
      --badge-new: #3b82f6;
      --task-done: #10b981;
      --card-shadow-heavy: 0 8px 32px rgba(0, 0, 0, 0.05);
      --text-main: #2d3748;
      --rail: #e2e8f0;
      --thumb: #cbd5e1;
      --table-header: #f7fafc;
    }
    [data-theme="dark"] {
      --bg: linear-gradient(135deg, #2d3748 0%, #1a202c 50%, #171923 100%);
      --light: #ffffff;
      --dark: #171923;
      --text: #ffffff;
      --text-muted: #a0aec0;
      --card-bg: rgba(45, 55, 72, 0.95);
      --card-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      --border: rgba(255, 255, 255, 0.1);
      --glass: rgba(45, 55, 72, 0.95);
      --glass-glow: rgba(240, 185, 11, 0.15);
      --sidebar-bg: rgba(45, 55, 72, 0.98);
      --sidebar-link: #ffffff;
      --sidebar-link-active: #000;
      --sidebar-heading: #a0aec0;
      --input-bg: rgba(45, 55, 72, 0.95);
      --input-border: rgba(255, 255, 255, 0.1);
      --badge-due: #f59e0b;
      --badge-new: #3b82f6;
      --task-done: #10b981;
      --card-shadow-heavy: 0 8px 32px rgba(0, 0, 0, 0.2);
      --text-main: #ffffff;
      --rail: rgba(255, 255, 255, 0.1);
      --thumb: rgba(255, 255, 255, 0.2);
      --table-header: rgba(45, 55, 72, 0.95);
    }

    body {
      font-family: 'Segoe UI', sans-serif;
      background: var(--bg);
      color: var(--text);
      overflow-x: hidden;
      margin: 0;
      height: 100%;
      transition: all 0.3s ease;
      position: relative;
      min-height: 100vh;
    }
    /* Enhanced Background Animation */
    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: 
        radial-gradient(circle at 20% 80%, var(--accent-glow) 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, var(--glass-glow) 0%, transparent 50%),
        radial-gradient(circle at 40% 40%, var(--accent-glow) 0%, transparent 50%);
      background-size: 100% 100%;
      animation: float 20s ease-in-out infinite;
      z-index: -2;
      opacity: 0.6;
    }

    body::after {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: 
        linear-gradient(45deg, transparent 30%, var(--glass-glow) 50%, transparent 70%),
        linear-gradient(-45deg, transparent 30%, var(--accent-glow) 50%, transparent 70%);
      animation: shimmer 15s ease-in-out infinite;
      z-index: -1;
      opacity: 0.3;
    }

    @keyframes float {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      33% { transform: translateY(-20px) rotate(1deg); }
      66% { transform: translateY(10px) rotate(-0.5deg); }
    }

    @keyframes shimmer {
      0%, 100% { opacity: 0.1; }
      50% { opacity: 0.3; }
    }

    nav.sidebar {
      position:fixed;top:0;left:0;width:230px;height:100vh;background:var(--sidebar-bg);border-right:1px solid var(--border);
      padding:2rem 1rem;display:flex;flex-direction:column;overflow-y:auto;
      box-shadow: 2px 0 24px 0 #ffe26722;
      z-index: 10;
      transition: background .35s;
      transition: transform 0.3s ease;
    }

    .logo img { max-width: 130px; margin-bottom: 1.2rem; border-radius:12px; box-shadow:0 2px 10px #f0b90b12;}
    .sidebar-heading { font-size: .87rem; color: var(--sidebar-heading); margin: .7rem 0 .4rem .4rem; font-weight: 600; text-transform:uppercase;}
    .sidebar-link { display: flex; align-items: center; border-radius: 8px; padding: 10px 12px; margin-bottom: 10px;
      color: var(--sidebar-link); text-decoration: none; font-weight: 500; transition: .18s; position: relative;}
    .sidebar-link i { margin-right:10px;font-size:1.18rem }
    .sidebar-link.active, .sidebar-link:hover {
      background: var(--accent);
      color: var(--sidebar-link-active);
      font-weight: 700;
      box-shadow:0 3px 18px 0 #ffe26748;
    }
    .btn-logout { margin-top:auto;width:100% }

    .main {
      margin-left: 250px;
      padding: 30px;
      min-height: 100vh;
    }

    /* Theme Toggle */
    .theme-controls {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1000;
    }

    .theme-toggle-btn {
      background: var(--glass);
      border: 1px solid var(--border);
      color: var(--accent);
      padding: 8px 12px;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .theme-toggle-btn:hover {
      background: var(--accent);
      color: var(--sidebar-link-active);
    }

    .task-card {
      background: var(--card-bg);
      border: 1px solid var(--border);
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 20px;
      transition: all 0.3s ease;
    }

    .task-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 30px rgba(240, 185, 11, 0.2);
    }

    .task-header {
      display: flex;
      justify-content: between;
      align-items: center;
      margin-bottom: 15px;
    }

    .task-title {
      color: var(--accent);
      font-weight: 700;
      font-size: 1.2em;
      margin: 0;
    }

    .task-status {
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 0.8em;
      font-weight: 600;
      text-transform: uppercase;
    }

    .status-open {
      background: rgba(255, 193, 7, 0.2);
      color: #ffc107;
      border: 1px solid #ffc107;
    }

    .status-progress {
      background: rgba(0, 123, 255, 0.2);
      color: #007bff;
      border: 1px solid #007bff;
    }

    .status-completed {
      background: rgba(40, 167, 69, 0.2);
      color: #28a745;
      border: 1px solid #28a745;
    }

    .task-meta {
      display: flex;
      gap: 20px;
      margin-bottom: 15px;
      font-size: 0.9em;
      color: #bbb;
    }

    .task-description {
      margin-bottom: 15px;
      line-height: 1.6;
    }

    .task-actions {
      display: flex;
      gap: 10px;
    }

    .btn-action {
      padding: 6px 16px;
      border: none;
      border-radius: 6px;
      font-size: 0.85em;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-primary {
      background: var(--accent);
      color: var(--sidebar-link-active);
    }

    .btn-secondary {
      background: transparent;
      color: var(--accent);
      border: 1px solid var(--accent);
    }

    .btn-action:hover {
      transform: translateY(-1px);
    }

    .stats-bar {
      display: flex;
      gap: 20px;
      margin-bottom: 30px;
      padding: 20px;
      background: var(--card-bg);
      border-radius: 12px;
      border: 1px solid var(--border);
    }

    .stat-item {
      text-align: center;
      flex: 1;
    }

    .stat-number {
      font-size: 2em;
      font-weight: 800;
      color: var(--accent);
    }

    .stat-label {
      font-size: 0.9em;
      color: #bbb;
      text-transform: uppercase;
    }

    .mobile-menu-btn {
      display: none;
      position: fixed;
      top: 20px;
      left: 20px;
      background: var(--accent);
      color: var(--sidebar-link-active);
      border: none;
      padding: 10px;
      border-radius: 8px;
      z-index: 1002;
    }

    .mobile-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      z-index: 999;
    }

    /* Kanban Board Styles */
    .kanban-column {
      min-width: 300px;
      background: var(--card-bg);
      border: 1px solid var(--border);
      border-radius: 12px;
      padding: 15px;
      flex: 1;
    }

    .kanban-tasks {
      min-height: 400px;
    }

    .kanban-task {
      background: var(--glass);
      border: 1px solid var(--border);
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 10px;
      cursor: grab;
      transition: all 0.3s ease;
    }

    .kanban-task:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(240, 185, 11, 0.2);
    }

    .kanban-task.dragging {
      opacity: 0.5;
      transform: rotate(5deg);
    }

    .kanban-task h4 {
      color: var(--accent);
      font-size: 1rem;
      margin: 0 0 8px 0;
      font-weight: 600;
    }

    .kanban-task p {
      font-size: 0.85rem;
      margin: 0 0 10px 0;
      color: #bbb;
    }

    .kanban-task .task-meta {
      font-size: 0.75rem;
      color: #888;
      display: flex;
      gap: 10px;
      margin-bottom: 0;
    }

    /* Modal Styles */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10000;
    }

    .modal {
      background: var(--card-bg);
      border: 1px solid var(--border);
      border-radius: 12px;
      padding: 25px;
      width: 90%;
      max-width: 500px;
      max-height: 80vh;
      overflow-y: auto;
    }

    .modal h3 {
      color: var(--accent);
      margin: 0 0 20px 0;
      font-weight: 700;
    }

    .form-group {
      margin-bottom: 15px;
    }

    .form-group label {
      display: block;
      margin-bottom: 5px;
      color: var(--accent);
      font-weight: 600;
    }

    .form-group input,
    .form-group textarea,
    .form-group select {
      width: 100%;
      padding: 10px;
      border: 1px solid var(--border);
      border-radius: 6px;
      background: var(--glass);
      color: var(--light);
      font-size: 14px;
    }

    .form-group textarea {
      min-height: 80px;
      resize: vertical;
    }

    .modal-actions {
      display: flex;
      gap: 10px;
      justify-content: flex-end;
      margin-top: 20px;
    }

    @media (max-width: 768px) {
      .mobile-menu-btn {
        display: block;
      }

      .sidebar {
        transform: translateX(-100%);
        position: fixed;
        z-index: 1000;
      }

      .sidebar.mobile-open {
        transform: translateX(0);
      }

      .mobile-overlay.show {
        display: block;
      }

      .main {
        margin-left: 0 !important;
        padding: 50px 0.5rem 1rem 0.5rem;
      }

      .theme-controls {
        top: 20px;
        right: 70px;
      }
    }
  </style>
</head>
<body>
  <!-- Mobile Menu Button -->
  <button class="mobile-menu-btn" id="mobileMenuBtn">
    <i class="bi bi-list"></i>
  </button>

  <!-- Theme Controls -->
  <div class="theme-controls">
    <button onclick="toggleTheme()" class="theme-toggle-btn" id="theme-toggle" title="Toggle Dark/Light Mode">
      <i class="bi bi-moon-fill" id="themeIcon"></i>
    </button>
  </div>

  <!-- Customer Sidebar -->
  <nav class="sidebar" id="sidebar" tabindex="0">
    <div class="logo">
      <img src="https://iili.io/F7bM6Jt.md.png" alt="VBMS">
      <span class="logo-eye-anim" style="position:absolute; top:50%; left:50%; transform:translate(-50%, -50%); pointer-events:none; overflow:visible;">
        <svg width="49" height="49" style="display:block; overflow:visible;">
          <!-- Iris ripple -->
          <circle cx="24.5" cy="23" r="13" stroke="#FFD600" stroke-width="2.2" fill="none" opacity="0.17">
            <animate attributeName="r" values="13;18;13" dur="1.3s" repeatCount="indefinite"/>
            <animate attributeName="opacity" values="0.17;0.33;0.17" dur="1.3s" repeatCount="indefinite"/>
          </circle>
          <!-- Pulsing iris -->
          <circle cx="24.5" cy="23" r="6.3" fill="#FFD600" opacity="0.77">
            <animate attributeName="opacity" values="0.77;0.21;0.77" dur="1.12s" repeatCount="indefinite"/>
          </circle>
          <!-- Scanning arc -->
          <path d="M24.5,8 A15,15 0 0 1 39,23" stroke="#FFD600" stroke-width="2.7" stroke-linecap="round" fill="none" opacity="0.7">
            <animateTransform
              attributeName="transform"
              type="rotate"
              from="0 24.5 23"
              to="360 24.5 23"
              dur="1.24s"
              repeatCount="indefinite"/>
          </path>
          <!-- Lens flare glint -->
          <rect x="-20" y="19" width="15" height="5" fill="#fff" opacity="0.15"
                transform="rotate(45 10 24.5)">
            <animate attributeName="x" values="-20;60" dur="3s" repeatCount="indefinite"/>
            <animate attributeName="opacity" values="0;0.2;0" dur="3s" repeatCount="indefinite"/>
          </rect>
        </svg>
      </span>
    </div>

    <p class="sidebar-heading">MY DASHBOARD</p>
    <a class="sidebar-link" href="client-dashboard.html"><i class="bi bi-speedometer2"></i> Dashboard</a>

    <p class="sidebar-heading">MY BUSINESS</p>
    <a class="sidebar-link" href="customer-orders.html"><i class="bi bi-box"></i> My Orders</a>
    <a class="sidebar-link" href="customer-inventory.html"><i class="bi bi-stack"></i> My Inventory</a>
    <a class="sidebar-link" href="customer-monitoring.html"><i class="bi bi-camera-video"></i> Monitoring</a>
    <a class="sidebar-link active" href="customer-tasks.html"><i class="bi bi-kanban"></i> Tasks</a>
    <a class="sidebar-link" href="customer-calendar.html"><i class="bi bi-calendar3"></i> Calendar</a>

    <p class="sidebar-heading">AI TOOLS</p>
    <a class="sidebar-link" href="customer-ai-chat.html"><i class="bi bi-robot"></i> AI Chat</a>

    <p class="sidebar-heading">LEARN & SUPPORT</p>
    <a class="sidebar-link" href="customer-training.html"><i class="bi bi-play-circle"></i> Training</a>
    <a class="sidebar-link" href="support.html"><i class="bi bi-chat-dots"></i> Support</a>
    <a class="sidebar-link" href="help.html"><i class="bi bi-mortarboard"></i> Help</a>

    <p class="sidebar-heading">ACCOUNT</p>
    <a class="sidebar-link" href="customer-settings.html"><i class="bi bi-gear"></i> Settings</a>

    <button class="btn btn-warning btn-logout" onclick="logout()"><i class="bi bi-box-arrow-left"></i> Logout</button>
</nav>

  <!-- Main Content -->
  <main class="main">
    <h1 style="color: var(--accent); font-weight: 800; margin-bottom: 30px;">
      <i class="bi bi-kanban"></i> My Tasks
    </h1>

    <!-- Task Statistics -->
    <div class="stats-bar">
      <div class="stat-item">
        <div class="stat-number" id="totalTasks">0</div>
        <div class="stat-label">Total Tasks</div>
      </div>
      <div class="stat-item">
        <div class="stat-number" id="openTasks">0</div>
        <div class="stat-label">Open</div>
      </div>
      <div class="stat-item">
        <div class="stat-number" id="progressTasks">0</div>
        <div class="stat-label">In Progress</div>
      </div>
      <div class="stat-item">
        <div class="stat-number" id="completedTasks">0</div>
        <div class="stat-label">Completed</div>
      </div>
    </div>

    <!-- View Toggle -->
    <div style="margin-bottom: 20px; display: flex; gap: 10px; align-items: center;">
      <button class="btn-action btn-primary" onclick="toggleView('list')" id="listViewBtn">
        <i class="bi bi-list-ul"></i> List View
      </button>
      <button class="btn-action btn-secondary" onclick="toggleView('kanban')" id="kanbanViewBtn">
        <i class="bi bi-kanban"></i> Kanban Board
      </button>
      <button class="btn-action btn-primary" onclick="showAddTaskModal()" style="margin-left: auto;">
        <i class="bi bi-plus-circle"></i> Add Task
      </button>
    </div>

    <!-- Tasks List View -->
    <div id="tasksList" style="display: block;">
      <!-- Tasks will be loaded here -->
    </div>

    <!-- Kanban Board View -->
    <div id="kanbanBoard" style="display: none;">
      <div style="display: flex; gap: 20px; overflow-x: auto; padding-bottom: 20px;">
        <div class="kanban-column">
          <h3 style="color: var(--accent); margin-bottom: 15px; text-align: center;">
            <i class="bi bi-circle"></i> Open
          </h3>
          <div id="openColumn" class="kanban-tasks"></div>
        </div>
        <div class="kanban-column">
          <h3 style="color: var(--accent); margin-bottom: 15px; text-align: center;">
            <i class="bi bi-arrow-right-circle"></i> In Progress
          </h3>
          <div id="progressColumn" class="kanban-tasks"></div>
        </div>
        <div class="kanban-column">
          <h3 style="color: var(--accent); margin-bottom: 15px; text-align: center;">
            <i class="bi bi-check-circle"></i> Completed
          </h3>
          <div id="completedColumn" class="kanban-tasks"></div>
        </div>
      </div>
    </div>
  </main>

  <!-- Mobile Overlay -->
  <div class="mobile-overlay" id="mobileOverlay"></div>

  <script src="auth.js"></script>
  <script>
    // Authentication check
    if (!vbmsAuth.isAuthenticated()) {
      console.log('Not authenticated - redirecting to customer login');
      window.location.href = 'customer-login.html';
    }

    // Sample tasks data - in production this would come from the API
    const tasksData = [
      {
        id: 'TASK-001',
        title: 'Update Menu Items',
        description: 'Review and update seasonal menu items for the upcoming month. Include pricing updates and ingredient availability.',
        status: 'open',
        assignee: 'Restaurant Manager',
        dueDate: '2025-01-30',
        project: 'Menu Management'
      },
      {
        id: 'TASK-002',
        title: 'Inventory Stock Check',
        description: 'Perform weekly inventory check for all food items and supplies. Update the system with current stock levels.',
        status: 'progress',
        assignee: 'Kitchen Staff',
        dueDate: '2025-01-28',
        project: 'Inventory Management'
      },
      {
        id: 'TASK-003',
        title: 'Staff Training Schedule',
        description: 'Coordinate with new staff members for POS system training and customer service guidelines.',
        status: 'open',
        assignee: 'HR Manager',
        dueDate: '2025-02-01',
        project: 'Staff Management'
      },
      {
        id: 'TASK-004',
        title: 'Equipment Maintenance',
        description: 'Schedule monthly maintenance for kitchen equipment including ovens, refrigerators, and POS systems.',
        status: 'completed',
        assignee: 'Maintenance Team',
        dueDate: '2025-01-25',
        project: 'Equipment Care'
      },
      {
        id: 'TASK-005',
        title: 'Customer Feedback Review',
        description: 'Analyze customer feedback from last month and implement necessary improvements to service quality.',
        status: 'progress',
        assignee: 'Customer Service',
        dueDate: '2025-01-29',
        project: 'Quality Improvement'
      }
    ];

    function loadTasks() {
      const tasksList = document.getElementById('tasksList');
      tasksList.innerHTML = '';

      if (tasksData.length === 0) {
        tasksList.innerHTML = `
          <div class="task-card" style="text-align: center; padding: 40px;">
            <i class="bi bi-kanban" style="font-size: 3em; color: var(--accent); margin-bottom: 20px;"></i>
            <h3 style="color: var(--accent);">No Tasks Found</h3>
            <p style="color: #bbb;">You don't have any tasks assigned yet. Check back later or contact your manager.</p>
          </div>
        `;
        return;
      }

      tasksData.forEach(task => {
        const taskCard = createTaskCard(task);
        tasksList.appendChild(taskCard);
      });

      updateTaskStats();
    }

    function createTaskCard(task) {
      const card = document.createElement('div');
      card.className = 'task-card';
      card.innerHTML = `
        <div class="task-header">
          <h3 class="task-title">${task.title}</h3>
          <span class="task-status status-${task.status}">${task.status.replace('progress', 'In Progress')}</span>
        </div>
        <div class="task-meta">
          <span><i class="bi bi-person"></i> ${task.assignee}</span>
          <span><i class="bi bi-calendar"></i> Due: ${formatDate(task.dueDate)}</span>
          <span><i class="bi bi-folder"></i> ${task.project}</span>
          <span><i class="bi bi-hash"></i> ${task.id}</span>
        </div>
        <div class="task-description">${task.description}</div>
        <div class="task-actions">
          ${task.status !== 'completed' ? `
            <button class="btn-action btn-primary" onclick="updateTaskStatus('${task.id}', 'progress')">
              ${task.status === 'open' ? 'Start Task' : 'Mark Complete'}
            </button>
          ` : ''}
          <button class="btn-action btn-secondary" onclick="viewTaskDetails('${task.id}')">
            View Details
          </button>
        </div>
      `;
      return card;
    }

    function updateTaskStatus(taskId, newStatus) {
      const task = tasksData.find(t => t.id === taskId);
      if (task) {
        if (task.status === 'open' && newStatus === 'progress') {
          task.status = 'progress';
          console.log(`Updating task ${taskId} to status: progress`);
        } else if (task.status === 'progress' && newStatus === 'progress') {
          task.status = 'completed';
          console.log(`Updating task ${taskId} to status: completed`);
        }
        loadTasks();
      }
    }

    function viewTaskDetails(taskId) {
      const task = tasksData.find(t => t.id === taskId);
      if (task) {
        alert(`Task Details:\n\nID: ${task.id}\nTitle: ${task.title}\nStatus: ${task.status}\nAssignee: ${task.assignee}\nDue Date: ${task.dueDate}\nProject: ${task.project}\n\nDescription:\n${task.description}`);
      }
    }

    function updateTaskStats() {
      const total = tasksData.length;
      const open = tasksData.filter(t => t.status === 'open').length;
      const progress = tasksData.filter(t => t.status === 'progress').length;
      const completed = tasksData.filter(t => t.status === 'completed').length;

      document.getElementById('totalTasks').textContent = total;
      document.getElementById('openTasks').textContent = open;
      document.getElementById('progressTasks').textContent = progress;
      document.getElementById('completedTasks').textContent = completed;
    }

    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric', 
        year: 'numeric' 
      });
    }

    // Mobile menu functionality - Initialize immediately
    (function initMobileMenu() {
      const mobileMenuBtn = document.getElementById('mobileMenuBtn');
      const sidebar = document.getElementById('sidebar');
      const mobileOverlay = document.getElementById('mobileOverlay');

      if (!mobileMenuBtn || !sidebar || !mobileOverlay) {
        // Retry if elements not ready
        setTimeout(initMobileMenu, 100);
        return;
      }

      function toggleMobileMenu() {
        sidebar.classList.toggle('mobile-open');
        mobileOverlay.classList.toggle('show');

        // Update button icon
        const icon = mobileMenuBtn.querySelector('i');
        if (sidebar.classList.contains('mobile-open')) {
          icon.classList.remove('bi-list');
          icon.classList.add('bi-x');
        } else {
          icon.classList.remove('bi-x');
          icon.classList.add('bi-list');
        }
      }

      function closeMobileMenu() {
        sidebar.classList.remove('mobile-open');
        mobileOverlay.classList.remove('show');
        const icon = mobileMenuBtn.querySelector('i');
        icon.classList.remove('bi-x');
        icon.classList.add('bi-list');
      }

      // Ensure sidebar is hidden on mobile by default
      if (window.innerWidth <= 768) {
        sidebar.classList.remove('mobile-open');
        mobileOverlay.classList.remove('show');
      }

      // Toggle menu on button click
      mobileMenuBtn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        toggleMobileMenu();
      });

      // Close menu on overlay click
      mobileOverlay.addEventListener('click', closeMobileMenu);

      // Close menu when clicking sidebar links on mobile
      const sidebarLinks = sidebar.querySelectorAll('.sidebar-link');
      sidebarLinks.forEach(link => {
        link.addEventListener('click', () => {
          if (window.innerWidth <= 768) {
            closeMobileMenu();
          }
        });
      });

      // Close menu on window resize if switching to desktop
      window.addEventListener('resize', () => {
        if (window.innerWidth > 768) {
          closeMobileMenu();
        }
      });
    })();

    function logout() {
      vbmsAuth.logout();
    }

    // Theme toggle functionality
    function toggleTheme() {
      const isLightTheme = document.documentElement.getAttribute('data-theme') === 'light';

      if (isLightTheme) {
        document.documentElement.removeAttribute('data-theme');
        document.body.removeAttribute('data-theme');
        localStorage.setItem('vbms-theme', 'dark');
        updateThemeIcon('dark');
      } else {
        document.documentElement.setAttribute('data-theme', 'light');
        document.body.setAttribute('data-theme', 'light');
        localStorage.setItem('vbms-theme', 'light');
        updateThemeIcon('light');
      }
    }

    function updateThemeIcon(theme) {
      const themeIcon = document.querySelector('#themeIcon');
      if (themeIcon) {
        themeIcon.className = theme === 'light' ? 'bi bi-sun-fill' : 'bi bi-moon-fill';
      }
    }

    function loadThemePreference() {
      const savedTheme = localStorage.getItem('vbms-theme') || 'dark';

      if (savedTheme === 'light') {
        document.documentElement.setAttribute('data-theme', 'light');
        document.body.setAttribute('data-theme', 'light');
      } else {
        document.documentElement.removeAttribute('data-theme');
        document.body.removeAttribute('data-theme');
      }

      updateThemeIcon(savedTheme);
    }

    let currentView = 'list';

    function toggleView(view) {
      currentView = view;
      const listView = document.getElementById('tasksList');
      const kanbanView = document.getElementById('kanbanBoard');
      const listBtn = document.getElementById('listViewBtn');
      const kanbanBtn = document.getElementById('kanbanViewBtn');

      if (view === 'list') {
        listView.style.display = 'block';
        kanbanView.style.display = 'none';
        listBtn.className = 'btn-action btn-primary';
        kanbanBtn.className = 'btn-action btn-secondary';
        loadTasks();
      } else {
        listView.style.display = 'none';
        kanbanView.style.display = 'block';
        listBtn.className = 'btn-action btn-secondary';
        kanbanBtn.className = 'btn-action btn-primary';
        loadKanbanBoard();
      }
    }

    function loadKanbanBoard() {
      const openColumn = document.getElementById('openColumn');
      const progressColumn = document.getElementById('progressColumn');
      const completedColumn = document.getElementById('completedColumn');

      openColumn.innerHTML = '';
      progressColumn.innerHTML = '';
      completedColumn.innerHTML = '';

      tasksData.forEach(task => {
        const taskCard = createKanbanCard(task);
        if (task.status === 'open') {
          openColumn.appendChild(taskCard);
        } else if (task.status === 'progress') {
          progressColumn.appendChild(taskCard);
        } else if (task.status === 'completed') {
          completedColumn.appendChild(taskCard);
        }
      });

      // Add drag and drop functionality
      initializeDragAndDrop();
    }

    function createKanbanCard(task) {
      const card = document.createElement('div');
      card.className = 'kanban-task';
      card.draggable = true;
      card.dataset.taskId = task.id;
      card.innerHTML = `
        <h4>${task.title}</h4>
        <p>${task.description.substring(0, 100)}${task.description.length > 100 ? '...' : ''}</p>
        <div class="task-meta">
          <span><i class="bi bi-person"></i> ${task.assignee}</span>
          <span><i class="bi bi-calendar"></i> ${formatDate(task.dueDate)}</span>
        </div>
      `;
      return card;
    }

    function initializeDragAndDrop() {
      const kanbanTasks = document.querySelectorAll('.kanban-task');
      const columns = document.querySelectorAll('.kanban-tasks');

      kanbanTasks.forEach(task => {
        task.addEventListener('dragstart', (e) => {
          task.classList.add('dragging');
          e.dataTransfer.setData('text/plain', task.dataset.taskId);
        });

        task.addEventListener('dragend', () => {
          task.classList.remove('dragging');
        });
      });

      columns.forEach(column => {
        column.addEventListener('dragover', (e) => {
          e.preventDefault();
        });

        column.addEventListener('drop', (e) => {
          e.preventDefault();
          const taskId = e.dataTransfer.getData('text/plain');
          const task = tasksData.find(t => t.id === taskId);

          if (task) {
            // Update task status based on column
            if (column.id === 'openColumn') {
              task.status = 'open';
            } else if (column.id === 'progressColumn') {
              task.status = 'progress';
            } else if (column.id === 'completedColumn') {
              task.status = 'completed';
            }

            updateTaskStats();
            loadKanbanBoard();
          }
        });
      });
    }

    function showAddTaskModal() {
      const modal = document.createElement('div');
      modal.className = 'modal-overlay';
      modal.innerHTML = `
        <div class="modal">
          <h3><i class="bi bi-plus-circle"></i> Add New Task</h3>
          <form id="addTaskForm">
            <div class="form-group">
              <label for="taskTitle">Task Title *</label>
              <input type="text" id="taskTitle" required>
            </div>
            <div class="form-group">
              <label for="taskDescription">Description</label>
              <textarea id="taskDescription" placeholder="Enter task description..."></textarea>
            </div>
            <div class="form-group">
              <label for="taskAssignee">Assignee</label>
              <select id="taskAssignee">
                <option value="Restaurant Manager">Restaurant Manager</option>
                <option value="Kitchen Staff">Kitchen Staff</option>
                <option value="HR Manager">HR Manager</option>
                <option value="Customer Service">Customer Service</option>
                <option value="Maintenance Team">Maintenance Team</option>
              </select>
            </div>
            <div class="form-group">
              <label for="taskDueDate">Due Date</label>
              <input type="date" id="taskDueDate">
            </div>
            <div class="form-group">
              <label for="taskProject">Project</label>
              <select id="taskProject">
                <option value="Menu Management">Menu Management</option>
                <option value="Inventory Management">Inventory Management</option>
                <option value="Staff Management">Staff Management</option>
                <option value="Equipment Care">Equipment Care</option>
                <option value="Quality Improvement">Quality Improvement</option>
                <option value="Customer Service">Customer Service</option>
              </select>
            </div>
            <div class="modal-actions">
              <button type="button" class="btn-action btn-secondary" onclick="closeModal()">Cancel</button>
              <button type="submit" class="btn-action btn-primary">Add Task</button>
            </div>
          </form>
        </div>
      `;

      document.body.appendChild(modal);

      // Handle form submission
      document.getElementById('addTaskForm').addEventListener('submit', (e) => {
        e.preventDefault();

        const newTask = {
          id: 'TASK-' + String(Date.now()).slice(-3),
          title: document.getElementById('taskTitle').value,
          description: document.getElementById('taskDescription').value || 'No description provided',
          status: 'open',
          assignee: document.getElementById('taskAssignee').value,
          dueDate: document.getElementById('taskDueDate').value || new Date().toISOString().split('T')[0],
          project: document.getElementById('taskProject').value
        };

        tasksData.unshift(newTask);
        updateTaskStats();

        if (currentView === 'list') {
          loadTasks();
        } else {
          loadKanbanBoard();
        }

        closeModal();
      });

      // Close modal on overlay click
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeModal();
        }
      });
    }

    function closeModal() {
      const modal = document.querySelector('.modal-overlay');
      if (modal) {
        modal.remove();
      }
    }

    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
      loadThemePreference();
      loadTasks();
    });
  </script>
</body>
</html>